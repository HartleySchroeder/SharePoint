<link rel="stylesheet" href="http://cserv.internal/sites/cmb/Training/SiteAssets/JQueryCSS.css">
<script src="http://cserv.internal/sites/cmb/Training/SiteAssets/jquery-1.12.4.js"></script>
<script src="http://cserv.internal/sites/cmb/Training/SiteAssets/jquery-ui-1.12.1.js"></script>
<script src="http://cserv.internal/sites/cmb/Training/SiteAssets/jquery.SPServices-2014.02.min.js" type="text/javascript"></script>

<style>
  #progressbar {
    margin-top: 20px;
  }
  #progressbar2 {
    margin-top: 20px;
  }
 
  .progress-label {
    font-weight: bold;
    text-shadow: 1px 1px 0 #fff;
  }
 
  .ui-dialog-titlebar-close {
    display: none;
  }
</style>

<div id="dialog" title="Running Workflows">
  <div class="progress-label">Starting workflows...</div>
  <div id="progressbar"></div>
</div>
<div id="dialog2" title="Running Workflows">
  <div class="progress-label">Starting workflows...</div>
  <div id="progressbar2"></div>
</div>
<button id="workflowButton">Start First Workflows</button>
<button id="workflowButton2">Start Second Workflows</button>

<script>

$( function() {
    var progressTimer,
	  progressTimer2,
	  workflowArray = [],
      progressbar = $( "#progressbar" ),
	  progressbar2 = $( "#progressbar2" ),
      progressLabel = $( ".progress-label" ),
      dialogButtons = [{
        text: "Close Dialog (workflows will continue to run)",
        click: closeDownload
      }],
	  dialogButtons2 = [{
        text: "Close Dialog (workflows will continue to run)",
        click: closeDownload2
      }],
      dialog = $( "#dialog" ).dialog({
        autoOpen: false,
        closeOnEscape: false,
        resizable: false,
        buttons: dialogButtons,
        open: function() {
			
			var activeWF;
			workflowArray = []
			var listItems = $().SPServices({
				operation: "GetListItems",
				listName: "ImportStageOne",
				async: false,
				CAMLViewFields: "<ViewFields><FieldRef Name='ID' /></ViewFields>",
				completefunc: function () {}			
			});
			
			var i = 0;
			$(listItems.responseXML).SPFilterNode("z:row").each(function() {
				if (i <= 3){ //remove this
					workflowArray[i] = $(this).attr("ows_ID");
					i++;
				}
			});
			
			progressbar.progressbar( "option", "max", i + 1 );
			progressbar.progressbar( "value", 1 );

			startWorkflow({
			  listName:"ImportStageOne",
			  itemID:workflowArray[0].toString(),
			  workflowName:"DataValidationTest",
			  parameters:[],
			  after:function() { }
			});

			setTimeout(function() { checkWorkflowStatus(0, "ImportStageOne", "DataValidationTest") }, 1000);

        },
        beforeClose: function() {
          workflowButton.button( "option", {
            disabled: false,
            label: "Start First Workflows"
          });
        }
      }),
	  
	  dialog2 = $( "#dialog2" ).dialog({
        autoOpen: false,
        closeOnEscape: false,
        resizable: false,
        buttons: dialogButtons2,
        open: function() {
			
			var activeWF;
			workflowArray = []
			var listItems = $().SPServices({
				operation: "GetListItems",
				listName: "LineItemImport",
				async: false,
				CAMLViewFields: "<ViewFields><FieldRef Name='ID' /></ViewFields>",
				completefunc: function () {}			
			});

			var i = 0;
			$(listItems.responseXML).SPFilterNode("z:row").each(function() {
				if (i <= 3){ //remove this
					workflowArray[i] = $(this).attr("ows_ID");
					i++;
				}
			});
			
			progressbar2.progressbar( "option", "max", i + 1 );
			progressbar2.progressbar( "value", 1 );

			startWorkflow({
			  listName:"LineItemImport",
			  itemID:workflowArray[0].toString(),
			  workflowName:"InvoiceImportWF",
			  parameters:[],
			  after:function() { }
			});

			setTimeout(function() { checkWorkflowStatus(0, "LineItemImport", "InvoiceImportWF") }, 1000);

        },
        beforeClose: function() {
          workflowButton2.button( "option", {
            disabled: false,
            label: "Start Second Workflows"
          });
        }
      }),
	  
      workflowButton = $( "#workflowButton" )
        .button()
        .on( "click", function() {
          $( this ).button( "option", {
            disabled: true,
            label: "running..."
          });
          dialog.dialog( "open" );
        });
		
		workflowButton2 = $( "#workflowButton2" )
        .button()
        .on( "click", function() {
          $( this ).button( "option", {
            disabled: true,
            label: "running..."
          });
          dialog2.dialog( "open" );
        });
 
    progressbar.progressbar({
      value: false,
      change: function() {
        progressLabel.text( "Current Progress: " + progressbar.progressbar( "value" ) + " of " + workflowArray.length );
      },
      complete: function() {
        progressLabel.text( "Complete!" );
        dialog.dialog( "option", "buttons", [{
          text: "Close",
          click: closeDownload
        }]);
        $(".ui-dialog button").last().trigger( "focus" );
      }
    });
	progressbar2.progressbar({
      value: false,
      change: function() {
        progressLabel.text( "Current Progress: " + progressbar2.progressbar( "value" ) + " of " + workflowArray.length );
      },
      complete: function() {
        progressLabel.text( "Complete!" );
        dialog2.dialog( "option", "buttons", [{
          text: "Close",
          click: closeDownload2
        }]);
        $(".ui-dialog button").last().trigger( "focus" );
      }
    });
 
    function closeDownload() {
      clearTimeout( progressTimer );
      dialog
        .dialog( "option", "buttons", dialogButtons )
        .dialog( "close" );
      progressbar.progressbar( "value", false );
      progressLabel
        .text( "Starting workflow..." );
      workflowButton.trigger( "focus" );
    }
	function closeDownload2() {
      clearTimeout( progressTimer2 );
      dialog2
        .dialog( "option", "buttons", dialogButtons2 )
        .dialog( "close" );
      progressbar2.progressbar( "value", false );
      progressLabel
        .text( "Starting workflow..." );
      workflowButton2.trigger( "focus" );
    }
 

function checkWorkflowStatus(itemID, listName, workflowName) {
	$().SPServices({
		operation: 'GetWorkflowDataForItem', 
		item: 'http://cserv.internal/sites/cmb/Training/Lists/' + listName + '/' + workflowArray[itemID].toString() + '_.000',
		completefunc: function(data,status){
			activeWF = $(data.responseXML).find("ActiveWorkflowsData > Workflows > Workflow").attr("Status1");
		
			var val;

			if (listName == "ImportStageOne") {
				val = progressbar.progressbar( "value" ) || 0;
			}
			else if (listName == "LineItemImport") {
				val = progressbar2.progressbar( "value" ) || 0;
			}

			if (activeWF == '2') {
				setTimeout(function() { checkWorkflowStatus(itemID, listName, workflowName) }, 500);
			}
			else if (activeWF == '5' || activeWF == '18' || activeWF === undefined || typeof activeWF == "undefined" || activeWF == void(0)) {
				itemID = itemID + 1;
				
				if (listName == "ImportStageOne") {
					progressbar.progressbar( "value", val + 1 );
				}
				else if (listName == "LineItemImport") {
					progressbar2.progressbar( "value", val + 1 );
				}
			
				if (itemID <= (workflowArray.length - 1)) {
					startWorkflow({
					  listName:listName,
					  itemID:workflowArray[itemID].toString(),
					  workflowName:workflowName,
					  parameters:[],
					  after:function() {
						 checkWorkflowStatus(itemID, listName, workflowName);
					  }
					});
				}
			}
			else {
				setTimeout(function() { checkWorkflowStatus(itemID, listName, workflowName) }, 500);
			}
		}
	});	
}

function startWorkflow(params) {
  // we need to make sure that SP.ClientContext is loaded
  if (SP.ClientContext == undefined) {
    setTimeout(function() { startWorkflow(params) }, 100);
     return
  }
  
  params.after = params.after || (function() {});
  if (!params.workflowName) { alert("Please provide the workflow name!"); return; }

  function onQuerySucceeded() {
    var enumerator = workflows.getEnumerator();
    while (enumerator.moveNext()) {
      var workflow = enumerator.get_current();

      if (workflow.get_name() == params.workflowName) {
        var url = 'http://' + window.location.hostname + item.get_item("FileRef");
        var templateId = '{' + workflow.get_id().toString() + '}';
        var workflowParameters = "<root />";
        if (params.parameters) {
          var p;
          if (params.parameters.length == undefined) p = [ params.parameters ];
          p = params.parameters.slice(0);
          workflowParameters = "<Data>";
          for (var i=0; i<p.length; i++)
            workflowParameters += "<"+p[i].Name+">"+p[i].Value+"</"+p[i].Name+">";
          workflowParameters += "</Data>";
        }
        // trigger the workflow
        jQuery().SPServices({
          operation:"StartWorkflow",
          async:false,
          item:url,
          templateId:templateId,
          workflowParameters:workflowParameters,
          completefunc:params.after
        });
      break;
      }
    }
  }
  function onQueryFailed() { throw "Error with Start workflow" }

  //var guid = new SP.Guid(__GlobalConfig.listID['Requested']);
  var context = SP.ClientContext.get_current();
  var lists = context.get_web().get_lists();
  var list = lists.getByTitle(params.listName);
  var item = list.getItemById(params.itemID);
  var file = item.get_file();

  context.load(list);
  context.load(item);

  var workflows = list.get_workflowAssociations();
  context.load(workflows);

  context.executeQueryAsync(onQuerySucceeded, onQueryFailed);
}
 } );
</script>